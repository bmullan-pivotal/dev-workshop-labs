<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>_index on Raytheon Pivotal Workshops</title>
    <link>http://raytheon.cfapps.io/</link>
    <description>Recent content in _index on Raytheon Pivotal Workshops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, Pivotal; All rights reserved.</copyright>
    <lastBuildDate>Wed, 23 Mar 2016 19:58:14 -0400</lastBuildDate>
    
	<atom:link href="http://raytheon.cfapps.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CloudTIG</title>
      <link>http://raytheon.cfapps.io/cloud_tig/</link>
      <pubDate>Thu, 19 May 2016 08:07:30 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/cloud_tig/</guid>
      <description>Cloud TIG Cloud Native Platform Nov 02 2015 Webex
Presenter: Josh McKenty, Field CTO, Pivotal. jmckenty@pivotal.io
Cloud Native Java May 19 2016 Slide Webex
Presenter: John Ferguson, Platform Architecture, Pivotal. jferguson@pivotal.io</description>
    </item>
    
    <item>
      <title>Lab01</title>
      <link>http://raytheon.cfapps.io/lab_302/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_302/</guid>
      <description>Lab 02 - Introspection, Monitoring, and Metrics using Spring Boot Actuator   Note  The completed code for this lab can be found at $COURSE_HOME/spring-boot-actuator/final/springbox-catalog.       In this lab, we&amp;#8217;ll do the following    We will explore Spring boot actuator.
       Approximate time: 20 minutes
     Exercises Set up the Actuator  Change to the lab directory:</description>
    </item>
    
    <item>
      <title>Lab03</title>
      <link>http://raytheon.cfapps.io/lab_303/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_303/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-boot-data/complete/springbox-catalog.       In this lab, we&amp;#8217;ll do the following    we&amp;#8217;ll utilize Spring Boot, Spring Data, and Spring Data REST to create a fully-functional hypermedia-driven RESTful web service.
      We&amp;#8217;ll begin the first subproject of our complete cloud-native application architecture: SpringBox, which implements the movie browsing portion of a &amp;#8220;Redbox-like&amp;#8221; website.</description>
    </item>
    
    <item>
      <title>Lab03</title>
      <link>http://raytheon.cfapps.io/lab_303a/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_303a/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-boot-data/complete/springbox-catalog.       In this lab    Create a MySQL database
  We&amp;#8217;ll deploy the app to Cloud Foundry
  Bind the app to MySQL
       Approximate time: 20 minutes
     Exercises Preparing for Cloud Foundry  Create manifest.</description>
    </item>
    
    <item>
      <title>Lab04</title>
      <link>http://raytheon.cfapps.io/lab_304/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_304/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-config/complete/springbox-catalog.       In this lab, we&amp;#8217;ll do the following    Create a GitHub repository to store our configuration
  Create a Spring Cloud Config Server and test it with a basic sample application
  Create Config Server Service in Cloud Foundry
  Deploy the springbox-catalog to cloud foundry and use the Config Server</description>
    </item>
    
    <item>
      <title>Lab05</title>
      <link>http://raytheon.cfapps.io/lab_305/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_305/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-eureka/complete/springbox-catalog.      Let&amp;#8217;s continue learning the components found in Spring Cloud to implement patterns for distributed systems. We&amp;#8217;ll use Spring Cloud Netflix to deploy Eureka, which is a component offering service registration and discovery.
  In this lab, we&amp;#8217;ll do the following    Create a Eureka server
  Set up the springbox-catalog app to use Eureka</description>
    </item>
    
    <item>
      <title>Lab05</title>
      <link>http://raytheon.cfapps.io/lab_305a/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_305a/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-eureka/final/springbox-catalog.       In this lab, we&amp;#8217;ll do the following    Create Spring Cloud Service Registry in Cloud Foundry
  Deploy springbox-catalog in Cloud Foundry
  Deploy springbox-client in Cloud Foundry
       Approximate time: 20 minutes
     Exercises Create Spring Cloud Service Registry in Cloud Foundry  Go to Cloud Foundry UI https://apps.</description>
    </item>
    
    <item>
      <title>Lab301</title>
      <link>http://raytheon.cfapps.io/lab_301/</link>
      <pubDate>Wed, 11 May 2016 06:07:56 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_301/</guid>
      <description>Lab 01 - Getting Started with Spring Boot     The completed code for this lab can be found at $COURSE_HOME/spring-boot-basics/final/springbox-catalog.      We&amp;#8217;ll begin the first subproject of our complete cloud-native application architecture: SpringBox, which implements the movie browsing portion of a ``Redbox-like&#39;&#39; website. This microservice will provide the Movie Catalog Service, which will allow us to browse movies by genre, browse an individual movie&amp;#8217;s details, and search for movies.</description>
    </item>
    
    <item>
      <title>Lab103</title>
      <link>http://raytheon.cfapps.io/lab_103/</link>
      <pubDate>Wed, 11 May 2016 05:26:17 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_103/</guid>
      <description>Lab 03 - Use an Application Manifest  In this lab we will run cf push with an application manifest in your application directory, setting different attributes.
  Approximate time: 10 minutes
     Exercises Set a different hostname  In the pre-build directory, use the manifest.yml
  Read the docs here for information on manifests
  Edit the application manifest for your simple application and add a different hostname entry.</description>
    </item>
    
    <item>
      <title>Lab103</title>
      <link>http://raytheon.cfapps.io/lab_102-a/</link>
      <pubDate>Wed, 11 May 2016 05:22:20 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_102-a/</guid>
      <description>Lab 03 - Deploy and Scale a Simple App  In this lab we will deploy a simple Java app, scale it, check its logs and SSH into a container.
  Approximate time: 15 minutes
     Setup  Check out the project labs to local. This can be accomplished as follows:
$ git clone https://github.com/yjayaraman-pivotal/raytheon-labs.git   If you don&amp;#8217;t have Git installed, you can download a zip file of the app at https://github.</description>
    </item>
    
    <item>
      <title>Lab103</title>
      <link>http://raytheon.cfapps.io/lab_102-b/</link>
      <pubDate>Wed, 11 May 2016 05:22:20 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_102-b/</guid>
      <description>Lab 03 - Deploy a Simple App  In this lab we will deploy a simple Java app, scale it, check its logs and SSH into a container.
  Approximate time: 15 minutes
     Setup  Check out the project labs to local. This can be accomplished as follows:
$ git clone https://github.com/yjayaraman-pivotal/se-labs.git   If you don&amp;#8217;t have Git installed, you can download a zip file of the app at https://github.</description>
    </item>
    
    <item>
      <title>Lab103</title>
      <link>http://raytheon.cfapps.io/lab_104/</link>
      <pubDate>Wed, 11 May 2016 05:22:20 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_104/</guid>
      <description>Lab 04 - Logging and Metrics  In this lab we will explore Logging and Metrics using CLI, and PCF Metrics
  Approximate time: 30 minutes
     Setup  Generate some logs for the attendees app. (This can be accomplished by navigating to the basics tab in the app and clicking on start load test and stop load test. You can also try stopping and starting the app)</description>
    </item>
    
    <item>
      <title>Lab Requirements</title>
      <link>http://raytheon.cfapps.io/lab_requirements/</link>
      <pubDate>Fri, 06 May 2016 07:14:45 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_requirements/</guid>
      <description>Pre-Requisites  Appropriate permissions to install software on your laptop.
 Internet Access. Internet access is required to take this course.
 Java Developers
 Installation of JDK 1.8. Open a terminal/command window and type java -version
 Optional (but recommended) Install STS
 You need an installation of Maven
 If you want to avoid building app with Maven, you can use the pre-built wars/jars directly from pre-built folder in the repository   .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/lab_x/</link>
      <pubDate>Wed, 27 Apr 2016 21:41:15 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_x/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Billerica Day1</title>
      <link>http://raytheon.cfapps.io/billerica_day1/</link>
      <pubDate>Wed, 27 Apr 2016 21:41:15 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/billerica_day1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sample Workshop</title>
      <link>http://raytheon.cfapps.io/sample-workshop/</link>
      <pubDate>Wed, 27 Apr 2016 21:41:15 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/sample-workshop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Workshop Day1</title>
      <link>http://raytheon.cfapps.io/workshop_day1/</link>
      <pubDate>Wed, 27 Apr 2016 21:41:15 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/workshop_day1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Billerica Day2</title>
      <link>http://raytheon.cfapps.io/billerica_day2/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/billerica_day2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Billerica Day3</title>
      <link>http://raytheon.cfapps.io/billerica_day3/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/billerica_day3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lab06</title>
      <link>http://raytheon.cfapps.io/lab_306/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_306/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-hystrix/final/springbox-client.     Let’s continue learning the components found in Spring Cloud to implement patterns for distributed systems. This time we’ll add an implementation of the Circuit Breaker pattern using Netflix Hystrix.
  In this lab, we’ll do the following    Refactor the consumer application from Lab 17 to add a slightly different ProducerClient than we added in Lab 18.</description>
    </item>
    
    <item>
      <title>Lab06</title>
      <link>http://raytheon.cfapps.io/lab_310/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_310/</guid>
      <description>In this lab we&amp;#8217;ll utilize Spring RestDocs to document a fully-functional hypermedia-driven RESTful web service.
   Note  The completed code for this lab can be found at $COURSE_HOME/spring-restdocs/complete/cities.       Initializing the Application  Change to the lab directory:
$ cd $COURSE_HOME/spring-restdocs/initial/cities     Optionally generate project files for your favorite IDE by running ./gradlew idea or ./gradlew eclipse. Then open the project in your editor or IDE of choice.</description>
    </item>
    
    <item>
      <title>Lab08</title>
      <link>http://raytheon.cfapps.io/lab_308/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_308/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-oauth/final/demo.     Let’s take a break from MovieLens and look at securing micro services using OAuth.
  In this lab, we’ll do the following    Run Cloud Foundry UAA server
  Create and run a Secure application
        Run Cloud Foundry UAA server  The UAA is the identity management service for Cloud Foundry.</description>
    </item>
    
    <item>
      <title>Lab08</title>
      <link>http://raytheon.cfapps.io/lab_308a/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_308a/</guid>
      <description>Note  The completed code for this lab can be found at $COURSE_HOME/spring-cloud-oauth/final/demo.     Let’s take a break from MovieLens and look at securing micro services using OAuth.
  In this lab, we’ll do the following    Use Pivotal SSO service to create a Service Plan with internal store for users
  Create an Admin Client App
  Add users to the Internal store for users</description>
    </item>
    
    <item>
      <title>Lab100</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_100/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_100/</guid>
      <description>Lab 2 - Pushing Your First ASP.NET Framework Application   Goal  In this lab, we&amp;#8217;ll do the following    We will deploy a simple ASP .NET app
      Approximate time: 5 minutes
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnet/pcf-dotnet-environment-viewer/ViewEnvironment/.      Depends on BOSH Release for Windows on Pivotal Network</description>
    </item>
    
    <item>
      <title>Lab101</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_101/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_101/</guid>
      <description>Lab 3 - Pushing Your First ASP.NET Core Application   Goal  In this lab, we&amp;#8217;ll do the following    We will deploy a ASP.NET Core app
      Approximate time: 10 minutes
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnet/lab01/.      In this lab we will push a pre-built ASP.</description>
    </item>
    
    <item>
      <title>Lab101</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_109/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_109/</guid>
      <description>Lab 11 - Steeltoe connectors and data protection providers   Goal The goals for this lab are to:
  Understand ASP.NET Core Session services.
  Understand ASP.NET Core Data Protection services
  Use Steeltoe MySql Connector to bind the FortuneContext with a MySql database.
  Use Steeltoe Redis Connector to cause the ASP.NET Core Session to use Redis for its Session storage.
  Use Steeltoe Redis DataProtection Key Storage provider to cause the ASP.</description>
    </item>
    
    <item>
      <title>Lab101</title>
      <link>http://raytheon.cfapps.io/lab_101/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_101/</guid>
      <description>Lab 01 - Setting up CLI, Orgs, Spaces, Users &amp;amp; Roles   Goal  In this lab, we&amp;#8217;ll do the following    We will install the command line interface (CLI)
  Log into PCF Env and use Apps manager to explore Orgs and Spaces
      Approximate time: 30 minutes
     Exercises Install the Cloud Foundry CLI  Check to see if you have a CLI already installed.</description>
    </item>
    
    <item>
      <title>Lab101</title>
      <link>http://raytheon.cfapps.io/lab_101_pcfdev/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_101_pcfdev/</guid>
      <description>Lab 01 - Command Line Interface   Goal Install the command line interface (CLI) and log into PCF Dev Env.
 Approximate time: 10 minutes
     Exercise Install PCF Dev  In a browser, navigate to https://network.pivotal.io and login with your username and password
  Click on &#39;PCF Dev&#39;
  Download the latest zip file
  Unzip pcfdev-&amp;lt;version&amp;gt;.zip
    Start PCF Dev  From the unzipped folder run start-osx</description>
    </item>
    
    <item>
      <title>Lab102</title>
      <link>http://raytheon.cfapps.io/lab_102/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_102/</guid>
      <description>Lab 02 - Deploy a simple application, scale, and bind services   Goal  In this lab, we&amp;#8217;ll do the following    We will install the command line interface (CLI)
  Log into PCF Env and deploy a simple Java app
  Scale it
  Check its logs and SSH into a container.
      Approximate time: 30 minutes
     Setup  You can download a zip file of the labs at https://github.</description>
    </item>
    
    <item>
      <title>Lab104</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_102/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_102/</guid>
      <description>Lab 4 - Binding to Cloud Foundry Services   Goal In this lab: - we&amp;#8217;ll be binding a MySQL database service to the application we pushed earlier and then view the configuration data Cloud Foundry provides to the application as a result.
 Approximate time: 10 minutes
    In this lab, we&amp;#8217;ll be binding a MySQL database service to the application we pushed earlier and then view the configuration data Cloud Foundry provides to the application as a result.</description>
    </item>
    
    <item>
      <title>Lab105</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_103/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_103/</guid>
      <description>Lab 5 - Scaling and Operating Applications   Goal  In this lab    we&amp;#8217;ll scaling the application.
      Approximate time: 10 minutes
    Pivotal Cloudfoundry makes the work of performing actions, such as scaling, doing a zero-downtime deploy, and managing application health very easy. In the next two labs we&amp;#8217;ll explore Pivotal Cloud Foundry operations.
     Scale the Application Up  Now let&amp;#8217;s increase the number of running application instances to 3.</description>
    </item>
    
    <item>
      <title>Lab105</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_104/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_104/</guid>
      <description>Lab 6 - Monitoring Applications   Goal  In this lab    We&amp;#8217;ll tail Application Logs
  Demonstrate self-healing
      Approximate time: 10 minutes
    Pivotal Cloud Foundry makes the work of performing actions, such as managing logs, doing a zero-downtime deploy, and managing application health very easy. In this lab we&amp;#8217;ll explore some of these capabilities.
     Tailing Application Logs One of the most important enablers of visibility into application behavior is logging.</description>
    </item>
    
    <item>
      <title>Lab105</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_105/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_105/</guid>
      <description>Lab 7 - Running, Publishing and Deploying ASP.NET Core Micro-services   Goal  In this lab    We&amp;#8217;ll become comfortable with running ASP.NET Core Web applications locally
  Push the application to Cloud-Foundry
      Approximate time: 1 hour
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnet/lab05/.      In this lab we will become comfortable with running ASP.</description>
    </item>
    
    <item>
      <title>Lab105</title>
      <link>http://raytheon.cfapps.io/lab_105/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_105/</guid>
      <description>Lab 05 - Bind to Cloud Foundry Services  The attendees application was designed to illustrate the ease with which various types of data services can be bound to and utilized by Spring applications running on Cloud Foundry. In this lab, we&amp;#8217;ll be binding the application to MySql database.
 Cloud Foundry services are managed through two primary types of operations:
  Create/Delete  These operations create or delete instances of a service.</description>
    </item>
    
    <item>
      <title>Lab106</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_106/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_106/</guid>
      <description>Lab 8 - Programming ASP.NET Core Micro-services   Goal  In this lab    We&amp;#8217;ll build a fully functional Fortune Teller application which uses several of the Steeltoe components
      Approximate time: 1 hour
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnet/lab06/.      Starting with this lab we will begin the process of creating a fully functional Fortune Teller application which uses several of the Steeltoe components.</description>
    </item>
    
    <item>
      <title>Lab106</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_107/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_107/</guid>
      <description>Lab 9 - Configuration and Steeltoe Config Server Client   Goal The goals for this lab are to:
  Understand ASP.NET Core Configuration.
  Understand ASP.NET Core Enironments
  Understand ASP.NET Core Options services.
  Use Environments to have seperate configuration for Development and Production.
  Use Options to configure the FortuneServiceClient with the address of the Fortune Teller Service
  Use Spring Cloud Config Server to centralize configurations</description>
    </item>
    
    <item>
      <title>Lab106</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_108/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_108/</guid>
      <description>Lab 10 - Service Discovery and Steeltoe Eureka Client   Goal The goals for this lab are to:
  Use Spring Cloud Eureka Server for Service Registration and Discovery
  Use Steeltoe Discovery client to register and discover the Fortune Teller Service
   Approximate time: 1 hour
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnet/lab06/.      In this lab we will continue to add functionality to the Fortune Teller application.</description>
    </item>
    
    <item>
      <title>Lab205</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_205/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_205/</guid>
      <description>Lab 10 - Running existing legacy IIS apps   Goal The goals for this lab are to:
  Get a legacy dotnet app and port it to Cloud Foundry
   Approximate time: 1 hour
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnettx/lab05/.      The next series of labs will walk you through a typical challange of taking an existing application, getting it to run on a Cloud Foundry, and will teach you the skills necesary to modernize it in an iterative way.</description>
    </item>
    
    <item>
      <title>Lab205</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_206/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_206/</guid>
      <description>Lab 12 - Database management with Flyway   Goal The goals for this lab are to:
  Get a legacy dotnet app and port it to Cloud Foundry
   Approximate time: 1 hour
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnettx/lab06/.      Most applications have to deal with data using some sort of persistence medium.</description>
    </item>
    
    <item>
      <title>Lab206</title>
      <link>http://raytheon.cfapps.io/dotnet/lab_207/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_207/</guid>
      <description>Lab 13 - Removing dependence on file configuration   Goal The goals for this lab are to:
  Remove dependence on file configuration
   Approximate time: 15 mins
     Note  The completed code for this lab can be found at $COURSE_HOME/dotnettx/lab06/.      As you saw, we had to tweak the web.config after we published in order to make environment specific config adjustments - in this case the URL of the backend.</description>
    </item>
    
    <item>
      <title>Lab401</title>
      <link>http://raytheon.cfapps.io/lab_401/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_401/</guid>
      <description>Lab 01 - Logging and Metrics  In this lab we will setup a log drain and view the logs using a logging service like Splunk. As part of Liberty forge a logging service would be bound to your application space. You will bind your app to this service and then drain logs into your service
  Approximate Time: 10 minutes
     Exercise Explore available Splunk log drain service  Download and explore the Router logs from the Logs tab.</description>
    </item>
    
    <item>
      <title>Lab402</title>
      <link>http://raytheon.cfapps.io/lab_402/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_402/</guid>
      <description>Lab 02 - Integrating with APM Tools   Goal Integrate multiple instances of a running application with a third-party Application Performance Monitoring (APM) tool.
 Estimated time: 20 minutes
     Exercise Configure and Use New Relic APM Service  Note  New Relic Service Broker for Pivotal Cloud Foundry must already be installed.
 If New Relic Tile is installed, check the Services Marketplace in Apps Manager.</description>
    </item>
    
    <item>
      <title>Lab402</title>
      <link>http://raytheon.cfapps.io/lab_403/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/lab_403/</guid>
      <description>Lab 02 - Integrating with APM Tools   Goal Integrate multiple instances of a running application with a third-party Application Performance Monitoring (APM) tool.
 Estimated time: 20 minutes
     Exercise Configure and Use New Relic APM Service  Note  New Relic Service Broker for Pivotal Cloud Foundry must already be installed.
 If New Relic Tile is installed, check the Services Marketplace in Apps Manager.</description>
    </item>
    
    <item>
      <title>Workshop Day2</title>
      <link>http://raytheon.cfapps.io/workshop_day2/</link>
      <pubDate>Wed, 23 Mar 2016 19:58:14 -0400</pubDate>
      
      <guid>http://raytheon.cfapps.io/workshop_day2/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-02/lab05/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-02/lab05/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</guid>
      <description>The MIT License (MIT) Copyright Jörn Zaefferer
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-02/lab05/lab_05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-02/lab05/lab_05/</guid>
      <description>In this lab we will become comfortable with running ASP.NET Core Web applications locally on our PC and publishing and deploying them to Cloud Foundry.
 We will be using a Fortune Teller micro-services based application as our sample. The app consists of a Fortune Teller Service which provides a REST API to serve up Fortunes and a Fortune Teller UI that can be used to display the Fortunes. In its current state, this app is not fully functional.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-02/lab06/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-02/lab06/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</guid>
      <description>The MIT License (MIT) Copyright Jörn Zaefferer
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-02/lab06/lab_06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-02/lab06/lab_06/</guid>
      <description>Starting with this lab we will begin the process of creating a fully functional Fortune Teller application which uses several of the Steeltoe components. You have two paths you can follow when doing the rest of the labs for the workshop:
  For each lab, open up and work with finished code. With this path you won&amp;#8217;t be writing any new code, instead, you will just be reviewing and running already completed lab code.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab07/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab07/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</guid>
      <description>The MIT License (MIT) Copyright Jörn Zaefferer
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab07/lab_07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab07/lab_07/</guid>
      <description>In this lab we will continue to add functionality to the Fortune Teller application. We will explore how to use the ASP.NET Core Configuration services and how to add the Spring Cloud Config Server as a source of configuration data using the Steeltoe Config Server provider.
 If you started with the FortuneTeller.sln, and completed Lab06, the app in its current state is still not fully functional:
  The Fortune Teller Service uses a backend in-memory datastore to hold Fortunes.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab08/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab08/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</guid>
      <description>The MIT License (MIT) Copyright Jörn Zaefferer
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab08/lab_08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab08/lab_08/</guid>
      <description>In this lab we will continue to add functionality to the Fortune Teller application. We will explore how to use Netflix Eureka for service registration and discovery using the Steeltoe Discovery client.
 If you started with the FortuneTeller.sln, and completed Lab 7, you have an app that is still not where we would like it to be:
  The Fortune Teller Service uses a backend in-memory datastore to hold Fortunes.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab09/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab09/fortune-teller-ui/wwwroot/lib/jquery-validation/license/</guid>
      <description>The MIT License (MIT) Copyright Jörn Zaefferer
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab09/lab_09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab09/lab_09/</guid>
      <description>In this lab we will continue to add functionality to the Fortune Teller application. We will explore some of the existing horizontal scaling issues with the app and how Steeltoe connectors and data protection providers can help solve those issues.
 If you started with the FortuneTeller.sln, and completed Lab 8, you have an app that is still not where we would like it to be:
  The Fortune Teller Service can not scale horizontally, as it uses a backend in-memory datastore to hold Fortunes.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/session-03/lab10/lab_10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/session-03/lab10/lab_10/</guid>
      <description>Coming Soon!
   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/dotnet/lab_110/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_110/</guid>
      <description>Coming Soon!
   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://raytheon.cfapps.io/dotnet/lab_208/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://raytheon.cfapps.io/dotnet/lab_208/</guid>
      <description>So far our application has been built using using some legacy stacks mainly WCF &amp;amp; WebForms. As the industry marches forward, WCF has really fallen out of style. With the arrival of .NET Core, it has been announced that WCF Services are not supported on the new stack. As a standard, REST based services built on top of WebAPI has replaced WCF based SOAP services as the new standard. In this demo we&amp;#8217;re going to build a brand new shiny backend using .</description>
    </item>
    
  </channel>
</rss>