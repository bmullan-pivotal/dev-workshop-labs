+++
categories = ["general"]
date = "2016-05-11T06:07:56-04:00"
tags = ["document"]
title = "Lab04"
type = "lab"
+++

= Lab 04 - Deploying and Using Spring Cloud Config Server

NOTE: The completed code for this lab can be found at `$COURSE_HOME/spring-cloud-config/complete/springbox-catalog`.

[abstract]
--
In this lab, we'll do the following::
- Create a GitHub repository to store our configuration
- Create a Spring Cloud Config Server and test it with a basic sample application
- Create Config Server Service in Cloud Foundry
- Deploy the springbox-catalog to cloud foundry and use the Config Server

Now we'll begin using the components found in Spring Cloud to implement patterns for distributed systems.
We'll being using Spring Cloud Config to centralize configuration for applications.
Our configuration will be stored in a GitHub repository, and served to our applications using the Spring Cloud Config Server.

---
***Approximate time: 20 minutes***
--


## Exercises

=== `Create a GitHub repository to Store Configuration`

. Login to your Github repository

. Create a repository called `springbox-config-repo` in Github
+
image::/images/github_a.png[]
+

. In the repo, create the file `springbox-catalog.yml`:
+

image::/images/github_0.png[]
+
and enter the following values
+
----
greeting: Welcome Movie Club Buffs!!!
----

=== `Run Spring Cloud Config Server`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/springbox-config-server
----

. Now open `src/main/resources/application.yml` and paste the following code (be sure to replace the Git URI with the one you created in this lab!):
+
----
server.port: 8888
spring.cloud.config.server.git.uri: https://github.com/regpaco/springbox-config-repo.git 
----
+
NOTE: If you don't have github access, you can point to your local git
*spring.cloud.config.server.git.uri=file:/path/to/your/git/repo*
+
. Run the application:
+
----
$ mvn spring-boot:run
----

. Test the application with `curl` to make sure everything is working properly:
+
----
→curl -i localhost:8888/springbox-catalog/default
HTTP/1.1 200
X-Application-Context: application:8888
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Date: Sun, 13 Nov 2016 19:34:35 GMT

{"name":"demo","profiles":["default"],"label":"master","version":"0075284d0f37b7898f9ab20e1c1839bb35e07e97","state":null,"propertySources":[{"name":"https://github.com/regpaco/springbox-config-repo.git/demo.yml","source":{"greeting":"Howdy"}},{"name":"https://github.com/regpaco/springbox-config-repo.git/application.yml","source":{"eureka.instance.leaseRenewalIntervalInSeconds":10,"eureka.instance.metadataMap.instanceId":"${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}","eureka.client.serviceUrl.defaultZone":"${vcap.services.springbox-service-registry.credentials.uri:http://127.0.0.1:8761}/eureka/","configserver":true,"bus":true}}]}
----

=== `Use Config Server with Springbox-catalog`
. Keep `Config Server` running

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-config/initial/springbox-catalog
----

. Create the file `src/main/resources/bootstrap.yml` and into that file paste the following:
+
----
spring:
  application:
    name: springbox-catalog
----

. Run the application:
+
----
$ mvn spring-boot:run
----
+
image::/images/spring-cloud-config.png[]
+
. Test the application with `curl` to make sure everything is working properly:
+
----
→curl -i localhost:8080
HTTP/1.1 200
X-Application-Context: springbox-catalog
Content-Type: text/plain;charset=UTF-8
Content-Length: 27
Date: Sun, 13 Nov 2016 19:47:51 GMT

Welcome Movie Club Buffs!!!
----

. Also, take a look at the Spring Environment to see how the `greeting` property is being resolved:
+
----
→curl  localhost:8080/env | jpp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 23035    0 23035    0     0  2674k      0 --:--:-- --:--:-- --:--:-- 2811k
{
    "applicationConfig: [classpath:/application.yml]": {
        "greeting": "Hello World",
        "spring.jpa.hibernate.ddl-auto": "create-drop"
    },
    "applicationConfig: [classpath:/bootstrap.yml]": {
        "spring.application.name": "springbox-catalog"
    },
    "configService:configClient": {
        "config.client.version": "0075284d0f37b7898f9ab20e1c1839bb35e07e97"
    },
    "configService:https://github.com/regpaco/springbox-config-repo.git/application.yml": {
        "bus": true,
        "configserver": true,
        "eureka.client.serviceUrl.defaultZone": "${vcap.services.springbox-service-registry.credentials.uri:http://127.0.0.1:8761}/eureka/",
        "eureka.instance.leaseRenewalIntervalInSeconds": 10,
        "eureka.instance.metadataMap.instanceId": "${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}"
    },
    "configService:https://github.com/regpaco/springbox-config-repo.git/springbox-catalog.yml": {
        "greeting": "Welcome Movie Club Buffs!!!"
    },
...
----

=== `Create Config Server Service in Cloud Foundry`

. From the command window type `cf marketplace`
+
----
service                       plans                                    description
app-autoscaler                standard                                 Scales bound applications in response to load
p-circuit-breaker-dashboard   standard                                 Circuit Breaker Dashboard for Spring Cloud Applications
p-config-server               standard                                 Config Server for Spring Cloud Applications
p-mysql                       100mb                                    MySQL databases on demand
p-rabbitmq                    standard                                 RabbitMQ service to provide shared instances of this high-performance multi-protocol messaging broker.
p-redis                       shared-vm, dedicated-vm                  Redis service to provide pre-provisioned instances configured as a datastore, running on a shared or dedicated VM.
p-service-registry            standard                                 Service Registry for Spring Cloud Applications
p.rabbitmq                    solo                                     RabbitMQ Service
p.redis                       cache-small, cache-medium, cache-large   Redis service to provide on-demand dedicated instances configured as a cache.

TIP:  Use 'cf marketplace -s SERVICE' to view descriptions of individual plans of a given service.
----
. create a file called config.json and put the following value in there (update it to point to your repo)
+
----
{"git": { "uri": "https://github.com/regpaco/springbox-config-repo" } }
----
. Using the values for p-config-server, create a config server service
 the service to point to your github uri for `springbox-config-repo`
+
----
cf create-service p-config-server standard springbox-config-service -c config.json
----
NOTE: This takes about 15 mins
. Periodically, verify that the changes have been applied
+
----
→cf services
Getting services in org Northeast / Canada / space yadhav as yjayaraman@pivotal.io...
OK

name                         service              plan       bound apps                                              last operation
springbox-config-service     p-config-server      standard        create succeeded

----

=== `Deploy the springbox-catalog to cloud foundry and use the Config Server`

. Change to the directory:
+
----
$ cd $COURSE_HOME/springcloud-config/initial/springbox-catalog
----

. Modify `src/main/resources/bootstrap.yml` and into that file paste the following (provide the matching application name!):
+
----
spring:
  application:
    name: springbox-catalog
  cloud:
    config:
      uri: ${vcap.services.springbox-config-service.credentials.uri:http://localhost:8888}

----


. Add the `springbox-config-service` service to the `manifest.yml`:
+
----
---
applications:
- name: springbox-catalog
  host: springbox-catalog-${random-word}
  memory: 512M
  instances: 1
  path: target/springbox-catalog-0.0.1-SNAPSHOT.jar
  env:
    SPRING_PROFILES_ACTIVE: cloud
    TRUST_CERTS: api.sys.mag.perfexel.com  # <--- Add this!
  services:
    - springbox-catalog-db
    - springbox-config-service  # <--- Add this!
----

. Open `pom.xml`,  add the following to the properties :
+
----
    <spring-cloud-services.version>1.6.0.RELEASE</spring-cloud-services.version>
----
. Add the following to dependecy management
+
----

  <dependencyManagement>
    <dependencies>
    ...
      <dependency>
        <groupId>io.pivotal.spring.cloud</groupId>
        <artifactId>spring-cloud-services-dependencies</artifactId>
        <version>${spring-cloud-services.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      ...
    </dependencies>
  </dependencyManagement>
----

. And add the appropriate dependencies for the Spring Cloud Services Config:
+
----
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-config-client</artifactId>
    </dependency>
----

. Build the JAR:
+
----
$ mvn package
----

. Push the application:
+
----
$ cf push

...

→cf push
Using manifest file /Users/bmullan/projects/dev-workshop-labs/spring-cloud-config/initial/springbox-catalog/manifest.yml

Creating app springbox-catalog in org lab-org99 / space development as user99@raytheon.com...
OK

Creating route springbox-catalog-bondless-volcanologist.cfapps.mag.perfexel.com...
OK

Binding springbox-catalog-bondless-volcanologist.cfapps.mag.perfexel.com to springbox-catalog...
OK

Uploading springbox-catalog...
Uploading app files from: /var/folders/vm/l9pjyw7n4jzdzdcn1j03nsch0000gp/T/unzipped-app754483284
Uploading 1.7M, 139 files
Done uploading
OK
Binding service springbox-catalog-db to app springbox-catalog in org lab-org99 / space development as user99@raytheon.com...
OK
Binding service springbox-config-service to app springbox-catalog in org lab-org99 / space development as user99@raytheon.com...
OK


requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: springbox-catalog-bondless-volcanologist.cfapps.mag.perfexel.com
last uploaded: Sun Nov 13 20:21:43 UTC 2016
stack: cflinuxfs2
buildpack: java-buildpack=v3.8.1-offline-https://github.com/cloudfoundry/java-buildpack.git#29c79f2 java-main maria-db-jdbc=1.4.6 open-jdk-like-jre=1.8.0_91-unlimited-crypto open-jdk-like-memory-calculator=2.0.2_RELEASE spring-auto-reconfiguration=1.10.0_RELEASE

     state     since                    cpu      memory         disk           details
#0   running   2016-11-13 03:22:29 PM   199.8%   479.5M of 1G   179.1M of 1G
----

. Access the application using `curl` to make sure the new `configserver` property exists:
+
----
$ curl -i springbox-catalog-overwild-nonrevival.cfapps.io/env
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/json;charset=UTF-8
Date: Wed, 18 Feb 2015 19:42:27 GMT
Server: Apache-Coyote/1.1
X-Application-Context: springbox-catalog:cloud:64189
X-Cf-Requestid: c1ea6030-a145-4c4a-71f1-9744b93f5058
transfer-encoding: chunked

{

...

    },
    "configService:https://github.com/regpaco/springbox-config-repo/application.yml": {
        "bus": true,
        "configserver": true,
        "eureka.client.serviceUrl.defaultZone": "${vcap.services.springbox-service-registry.credentials.uri:http://127.0.0.1:8761}/eureka/",
        "eureka.instance.leaseRenewalIntervalInSeconds": 10,
        "eureka.instance.metadataMap.instanceId": "${vcap.application.instance_id:${spring.application.name}:${server.port:8080}}"
    },

...

}
----

=== `Clean Up`

NOTE::
The next step is optional. You can continue the next lab using the workspace that you have created, or clean up and follow the next lab from scratch.


Let's clean up our application so that we can have a clean start for the next lab 

. Delete the springbox-catalog project from your IDE

. Delete the application:
+
----
→cf d springbox-catalog

Really delete the app springbox-catalog?> y
Deleting app springbox-catalog in org lab-org99 / space development as user99@raytheon.com...
OK
----

