+++
categories = ["general"]
date = "2016-03-23T19:58:14-04:00"
tags = ["document"]
title = "Lab06"
type = "lab"
+++

:compat-mode:
= Lab 06 - Fault Tolerance With Hystrix

NOTE: The completed code for this lab can be found at `$COURSE_HOME/spring-cloud-hystrix/final/springbox-client`.

Let’s continue learning the components found in Spring Cloud to implement patterns for distributed systems. This time we’ll add an implementation of the Circuit Breaker pattern using Netflix Hystrix.

In this lab, we’ll do the following::

- Refactor the consumer application from Lab 17 to add a slightly different ProducerClient than we added in Lab 18.

- Test the new consumer version against our local pool of producers

- Kill one of the producers and watch the consumer failover.

- Kill the remaining producer and watch the circuit breaker fallback behavior.

- Restart a producer and watch the consumer recover.

=== `Create Spring Cloud Hystrix Dashboard in Cloud Foundry`

. Go to Cloud Foundry UI https://apps.run.haas-89.pez.pivotal.io and add an instance of `Hystrix Dashboard` from the marketplace 
+
image:/images/spring-cloud-hystrix.png[]
+
. Call it `springbox-hystrix-dashboard` . Do not bind it to any apps at this time.

. Click on the Service and Click on `Manage`

. Wait till the service has been created
+
image:/images/spring-cloud-hystrix-1.png[]


=== `Deploy springbox-client in Cloud Foundry`

. Change to the lab directory:
+
----
$ cd $COURSE_HOME/spring-cloud-hystrix/initial/springbox-client
----

. Modify `manifest.yml` file under `springbox-client` and copy the following contents:
+
----
---
applications:
- name: springbox-client
  host: springbox-client-${random-word}
  memory: 1G
  instances: 1
  path: target/springbox-client-0.0.1-SNAPSHOT.jar
  env:
    SPRING_PROFILES_ACTIVE: cloud
    TRUST_CERTS: api.run.haas-89.pez.pivotal.io  
  services:
  - springbox-config-service
  - springbox-service-registry  
  - springbox-hystrix-dashboard
  timeout: 120
  
----

. And add the appropriate dependencies for the Spring Cloud Services:
+
----
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-hystrix</artifactId>
    </dependency>
    <dependency>
      <groupId>io.pivotal.spring.cloud</groupId>
      <artifactId>spring-cloud-services-starter-circuit-breaker</artifactId>
    </dependency>
----

. Modify `lab.MovieClient.java` to add the following code:
+
----
  @HystrixCommand(fallbackMethod = "getDefaultMovies", commandProperties = {
      @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "30000"),
      @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "4"),
      @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "60000"),
      @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "180000") }, threadPoolProperties = {
          @HystrixProperty(name = "coreSize", value = "30"),
          @HystrixProperty(name = "metrics.rollingStats.timeInMilliseconds", value = "180000") })
  String getMovies() {
    return restTemplate.getForObject("//SPRINGBOX-CATALOG/movies", String.class);
  }

  String getDefaultMovies() {
    return "{movies: \"dummy\"}";
  }
----

. Modify `lab.SpringboxClientApplication.java` to add the following code:
+
----
  @RequestMapping("/movies")
  public String movies() {
    return movieClient.getMovies();
  }
----


. Build the JAR:
+
----
$ mvn package
----

. Push the application:
+
----
→cf push

...
App springbox-client was started using this command `CALCULATED_MEMORY=$($PWD/.java-buildpack/open_jdk_jre/bin/java-buildpack-memory-calculator-2.0.2_RELEASE -memorySizes=metaspace:64m..,stack:228k.. -memoryWeights=heap:65,metaspace:10,native:15,stack:10 -memoryInitials=heap:100%,metaspace:100% -stackThreads=300 -totMemory=$MEMORY_LIMIT) && JAVA_OPTS="-Djava.io.tmpdir=$TMPDIR -XX:OnOutOfMemoryError=$PWD/.java-buildpack/open_jdk_jre/bin/killjava.sh $CALCULATED_MEMORY" && SERVER_PORT=$PORT eval exec $PWD/.java-buildpack/open_jdk_jre/bin/java $JAVA_OPTS -cp $PWD/. org.springframework.boot.loader.JarLauncher`

Showing health and status for app springbox-client in org lab-org99 / space development as user99@nuance.com...
OK

requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: springbox-client-anticoagulating-thema.cfapps.haas-89.pez.pivotal.io, springbox-client-lamellate-aerotropism.cfapps.haas-89.pez.pivotal.io, springbox-client-censual-oleomargarine.cfapps.haas-89.pez.pivotal.io, springbox-client-multitube-bioelectricity.cfapps.haas-89.pez.pivotal.io, springbox-client-peloric-radiance.cfapps.haas-89.pez.pivotal.io
last uploaded: Tue Nov 15 02:47:03 UTC 2016
stack: cflinuxfs2
buildpack: java-buildpack=v3.8.1-offline-https://github.com/cloudfoundry/java-buildpack.git#29c79f2 java-main open-jdk-like-jre=1.8.0_91-unlimited-crypto open-jdk-like-memory-calculator=2.0.2_RELEASE spring-auto-reconfiguration=1.10.0_RELEASE

     state     since                    cpu      memory         disk           details
#0   running   2016-11-14 09:47:55 PM   279.2%   520.4M of 1G   170.6M of 1G
----

. Using `curl`, test the client application and show that it is receiving values from the catalog:
+
----
→curl -i springbox-client-anticoagulating-thema.cfapps.haas-89.pez.pivotal.io/movies
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Date: Tue, 15 Nov 2016 00:59:27 GMT
X-Application-Context: springbox-client:cloud:0
X-Vcap-Request-Id: d12365c1-0510-40d5-44ae-8a61c9f78756
Transfer-Encoding: chunked

{"_embedded":{"movieList":[{"id":null,"title":"Toy Story (1995)","mlId":"1","genres":null,"numberInStock":10},{"id":null,"title":"GoldenEye (1995)
...
----

. Stop `springbox-catalog` app

. Using `curl`, test the client application and show that it is receiving default values from the fallback method
+
----
→curl springbox-client-anticoagulating-thema.cfapps.haas-89.pez.pivotal.io/movies
{movies: "dummy"}
----

. Repeat the curl several times

. See the Hystrix dashboard show the circuit breaker open
+
image:/images/spring-cloud-hystrix-3.png[]

. Start `springbox-catalog` app

. Using `curl`, test the client application and show that it is receiving values from the catalog:
+
----
→curl -i springbox-client-anticoagulating-thema.cfapps.haas-89.pez.pivotal.io/movies
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Date: Tue, 15 Nov 2016 00:59:27 GMT
X-Application-Context: springbox-client:cloud:0
X-Vcap-Request-Id: d12365c1-0510-40d5-44ae-8a61c9f78756
Transfer-Encoding: chunked

{"_embedded":{"movieList":[{"id":null,"title":"Toy Story (1995)","mlId":"1","genres":null,"numberInStock":10},{"id":null,"title":"GoldenEye (1995)
...
----
+
. Repeat the curl several times

. See the Hystrix dashboard show the circuit breaker closed
+
image:/images/spring-cloud-hystrix-2.png[]



